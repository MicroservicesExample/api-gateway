#logging:
#  level:
#    io.github.resilience4j: DEBUG
#    org.springframework.cloud: DEBUG
server:
  port: 8080
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful
  
spring:
  application:
    name: app-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  security:
    oauth2:
      client:
        provider:
          myauth:
            issuer-uri: "${OAUTH2_SERVICE_ISSUER-URI:http://localhost:9000}"
        registration:
          myauth:
            client-id: ${app.authentication.client-id}
            client-secret: ${app.authentication.client-secret}
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_basic
            redirect-uri: "${OAUTH2_LOGIN_REDIRECT-URI:{baseUrl}/login/oauth2/code/myauth}"
            scope: openid
  config:
    import: "optional:configserver:"
  cloud:
    config:
      uri: "http://localhost:9001"
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: false
      retry:
        max-attempts: 5
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
    gateway:
      routes:
        - id: invoice-route
          uri: ${INVOICE_SERVICE_URI:http://localhost:8081}/invoices
          predicates:
            - Path=/invoices/**
          filters:
            - name: CircuitBreaker
              args:
                name: invoiceCircuitBreaker
                fallbackUri: forward:/invoice-fallback
        - id: payment-route
          uri: ${PAYMENT_SERVICE_URI:http://localhost:8082}/payments
          predicates:
            - Path=/payments/**
          filters:
            - name: CircuitBreaker
              args:
                name: paymentCircuitBreaker
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic #other options: fixed, disabled
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: TokenRelay #This filter will add authorization header into the request -> GET /invoices Authorization: Bearer <access_token>

#enable refresh end point of the actuator, exposes http /actuator/refresh end point
management:
  endpoints:
    web.exposure.include: refresh  
              
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50 # 50%
        waitDurationInOpenState: 15000 #in ms before moving to half-open from open state
  timelimiter: #request timeout
    configs:
      default:
        timeoutDuration: 5s
app:
  authentication:
    client-id: app-service
    client-secret: secret