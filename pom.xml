<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>org.ashok</groupId>
	<artifactId>app-service</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>app-service</name>
	<description>APP</description>
	<properties>
		<java.version>17</java.version>
		<spring-cloud.version>2022.0.4</spring-cloud.version>
		<!-- provide these property values on the cli -->
		<image.name>${project.name}</image.name>
		<image.publish>false</image.publish>
		<registry.user />
		<registry.password />
		<registry.url />
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-gateway</artifactId>
		</dependency>
		<dependency>
	      <groupId>org.springframework.cloud</groupId>
	      <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
	    </dependency>
	    
	     <dependency>
	        <groupId>io.github.resilience4j</groupId>
	        <artifactId>resilience4j-reactor</artifactId>        
      	</dependency>
      	<!-- for storing rate limit counters and session -->
		<dependency>
	      <groupId>org.springframework.boot</groupId>
	      <artifactId>spring-boot-starter-data-redis-reactive</artifactId>
	    </dependency>
	    
	    <!-- spring session redis -->
	    <dependency>
	        <groupId>org.springframework.session</groupId>
	        <artifactId>spring-session-data-redis</artifactId>
	        
      	</dependency>
      	
      	<!-- config server client -->
    	 <dependency>
	      <groupId>org.springframework.cloud</groupId>
	      <artifactId>spring-cloud-starter-config</artifactId>
	    </dependency>
	    
	     <!-- config server client retry -->
	    <dependency>
	        <groupId>org.springframework.retry</groupId>
	        <artifactId>spring-retry</artifactId>
	    </dependency>
	    
	     <!-- actuator provides many endpoints, we will use refresh endpoint to trigger configuration refresh -->
	     <dependency>
	      <groupId>org.springframework.boot</groupId>
	      <artifactId>spring-boot-starter-actuator</artifactId>
	    </dependency>
	    
	    <!-- Oauth client -->
	    <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		
		<!-- Provide lightweight, throwaway instances of common databases, Selenium web browsers, 
			or anything else that can run in a Docker container.-->
		<dependency>
	      <groupId>org.springframework.boot</groupId>
	      <artifactId>spring-boot-testcontainers</artifactId>
	      <scope>test</scope>
	    </dependency>
	    <dependency>
	      <groupId>org.testcontainers</groupId>
	      <artifactId>junit-jupiter</artifactId>
	      <scope>test</scope>
	    </dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<!-- buildpacks (BP) container image configuration -->
					<image>
						<name>${image.name}</name>
						<publish>${image.publish}</publish>
						<env>
							 <BP_JVM_VERSION>${java.version}</BP_JVM_VERSION>
						</env>
					</image>
					<!-- push /publish image to registry -->
					<docker>
			            <publishRegistry>
			                <username>${registry.user}</username>
			                <password>${registry.password}</password>
			                <url>${registry.url}</url>
			            </publishRegistry>
        			</docker>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>
